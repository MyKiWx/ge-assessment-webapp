import {
  Box,
  Flex,
  Button,
  Container,
  Heading,
  Center,
  Badge,
  Divider,
  Text,
  Checkbox,
  RadioGroup,
  Stack,
  Radio,
  useColorModeValue,
  Tooltip,
  useToast,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalCloseButton,
  ModalBody,
  ModalFooter,
  useDisclosure,
} from '@chakra-ui/react';

import React, { useRef, useState } from 'react'
import Head from 'next/head'; ''
import FadeIn from 'react-fade-in';
import { useEffect } from 'react';
import RadioBox from '../../components/question/RadioBox';
import { QUESTION_ITEMS1 } from '../../src/data/QUESTION_ITEMS';
import SelectBox from '../../components/question/SelectBox';
import Link from 'next/link';
import Router from 'next/router';
import { useDispatch, useSelector } from 'react-redux';
// import { addAnswer1 } from '../../features/answer/answerSlice1';
import { addAnswer1 } from '../../features/answer/answerSlice';
import { RootState } from '../../app/store';
// import { Router } from 'next/router';

type Props = {}

const Assessment1 = (props: Props) => {
  const textColor = useColorModeValue('gray.600', 'gray.300')

  const answer1 = useSelector((state: RootState) => state.answer.value1)

  const disPatch = useDispatch()

  const [value1001, setValue1001] = useState<string>(answer1[0] && answer1[0])
  const [value1002, setValue1002] = useState<string>(answer1[1] && answer1[1])
  const [value1003, setValue1003] = useState<string>(answer1[2] != undefined ? answer1[2] : '-')
  const [value1004, setValue1004] = useState<string>(answer1[3] && answer1[3])

  const toast = useToast()
  const [validate, setValidate] = useState(false)
  function validateAns() {
      if (value1001 === undefined || value1002 === undefined || value1004 === undefined) {
          toast({
              title: "‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ç‡πâ‡∏≠‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞‡∏á‡∏±‡∏ö ü´∂",
              // description: `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡∏Ñ`,
              status: "warning",
              variant: 'left-accent',
              duration: 3000,
              isClosable: true,
          })
      } else {
          setValidate(true);

          disPatch(addAnswer1([value1001, value1002, value1003, value1004]))

          setTimeout(() => {
              Router.push('/stresssurvey/survey2')
              toast({
                  title: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                  description: `‡πÄ‡∏û‡∏® : ${value1001}, ‡∏™‡∏ñ‡∏≤‡∏ô‡∏†‡∏≤‡∏û : ${value1002}, ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏®‡∏∂‡∏Å‡∏©‡∏≤ : ${value1003}, ‡∏Ñ‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏®‡∏∂‡∏Å‡∏©‡∏≤ : ${value1004}`,
                  status: "success",
                  duration: 7000,
                  isClosable: true,
              })
          }, 2000)
      }
  }

  return (
      <>
          <Head>
              <title>‡πÅ‡∏ö‡∏ö‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ</title>
              <meta name="description" content="Generated by create next app" />
              <link rel="icon" href="/keu.jpeg" />
          </Head>
          <Box pt={'60px'}>
              <Container maxW='container.sm' pt={4}>
                  <Box
                      px={[1, 1, 8, 8]}
                      pt={[1, 1, 4, 4]}
                      pb={[4, 4, 10, 10]}
                      borderRadius='lg'
                      // boxShadow={{ base: 'none', md: 'lg' }}
                  >
                      <FadeIn>
                          <Flex w='full' h='full' justify={'center'} align='center' my={4}>

                              <Heading p={3}>
                                  ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
                              </Heading>

                          </Flex>
                          {/* <Text color={textColor} mx={8} fontWeight='400'>
                              <i>‡πÅ‡∏ö‡∏ö‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ ‡πÅ‡∏•‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏Ç‡∏≠‡∏á‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô</i>
                          </Text> */}

                          <RadioBox label={QUESTION_ITEMS1[0].label} choices={QUESTION_ITEMS1[0].choices} value={value1001} setValue={setValue1001} />
                          <RadioBox label={QUESTION_ITEMS1[1].label} choices={QUESTION_ITEMS1[1].choices} value={value1002} setValue={setValue1002} />
                          <SelectBox label={QUESTION_ITEMS1[2].label} placeholder={QUESTION_ITEMS1[2].placeholder} choices={QUESTION_ITEMS1[2].choices} value={value1003} setValue={setValue1003} boxWidth={'100px'} />
                          <SelectBox label={QUESTION_ITEMS1[3].label} placeholder={QUESTION_ITEMS1[3].placeholder} choices={QUESTION_ITEMS1[3].choices} value={value1004} setValue={setValue1004} boxWidth={'full'} />

                          <>
                              <Box
                                  mt={'24px'}
                              >
                                  <Center>
                                      <Button
                                          size='md'
                                          type='submit'
                                          colorScheme='orange'
                                          isLoading={validate}
                                          loadingText='‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
                                          onClick={() => { validateAns() }}
                                      >
                                          ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
                                      </Button>
                                  </Center>
                              </Box>
                          </>
                      </FadeIn>
                  </Box>
              </Container>
          </Box>
      </>
  )
}

export default Assessment1